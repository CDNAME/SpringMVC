<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">
    
    <!--Tomcat的conf文件夹中也有web.xml文件，里面有DefaultServlet属性-->
    <!-- 配成/导致不能访问静态资源的第一种解决方案 -->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.jpg</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.png</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.css</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.js</url-pattern>
    </servlet-mapping>
    
    <!--注册中央调度器-->
    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--指定SpringMVC配置文件的位置及文件名-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <!--<param-value>classpath:applicationContext.xml</param-value>-->
            <!-- 配成/导致不能访问静态资源的第二、三种解决方案  -->
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
        <!--在Tomcat启动时直接创建该Servlet-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <!--<url-pattern>*.do</url-pattern>-->
        <!-- 最好不要配成/,因为DispatcherServlet会拦截静态资源，导致不能访问静态资源 -->
        <!-- 但是有三种方法可以解决静态资源不能访问的问题 -->
        <url-pattern>/</url-pattern>
        <!-- 一定不能配成/*,DispatcherServlet会拦截动态资源，导致jsp页面也不能被访问 -->
        <!--<url-pattern>/*</url-pattern>-->
    </servlet-mapping>
</web-app>